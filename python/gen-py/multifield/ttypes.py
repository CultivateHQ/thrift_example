#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Multifield(object):
    """
    Attributes:
     - bool_one
     - bool_two
     - bool_three
     - map_four
     - list_five
     - byte_six
     - bool_seventeen
    """


    def __init__(self, bool_one=None, bool_two=None, bool_three=None, map_four=None, list_five=None, byte_six=None, bool_seventeen=None,):
        self.bool_one = bool_one
        self.bool_two = bool_two
        self.bool_three = bool_three
        self.map_four = map_four
        self.list_five = list_five
        self.byte_six = byte_six
        self.bool_seventeen = bool_seventeen

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.bool_one = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.bool_two = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.bool_three = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.MAP:
                    self.map_four = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readBool()
                        _val6 = iprot.readBool()
                        self.map_four[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.LIST:
                    self.list_five = []
                    (_etype10, _size7) = iprot.readListBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readBool()
                        self.list_five.append(_elem12)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BYTE:
                    self.byte_six = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 17:
                if ftype == TType.BOOL:
                    self.bool_seventeen = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Multifield')
        if self.bool_one is not None:
            oprot.writeFieldBegin('bool_one', TType.BOOL, 1)
            oprot.writeBool(self.bool_one)
            oprot.writeFieldEnd()
        if self.bool_two is not None:
            oprot.writeFieldBegin('bool_two', TType.BOOL, 2)
            oprot.writeBool(self.bool_two)
            oprot.writeFieldEnd()
        if self.bool_three is not None:
            oprot.writeFieldBegin('bool_three', TType.BOOL, 3)
            oprot.writeBool(self.bool_three)
            oprot.writeFieldEnd()
        if self.map_four is not None:
            oprot.writeFieldBegin('map_four', TType.MAP, 4)
            oprot.writeMapBegin(TType.BOOL, TType.BOOL, len(self.map_four))
            for kiter13, viter14 in self.map_four.items():
                oprot.writeBool(kiter13)
                oprot.writeBool(viter14)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.list_five is not None:
            oprot.writeFieldBegin('list_five', TType.LIST, 5)
            oprot.writeListBegin(TType.BOOL, len(self.list_five))
            for iter15 in self.list_five:
                oprot.writeBool(iter15)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.byte_six is not None:
            oprot.writeFieldBegin('byte_six', TType.BYTE, 6)
            oprot.writeByte(self.byte_six)
            oprot.writeFieldEnd()
        if self.bool_seventeen is not None:
            oprot.writeFieldBegin('bool_seventeen', TType.BOOL, 17)
            oprot.writeBool(self.bool_seventeen)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Multifield)
Multifield.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'bool_one', None, None, ),  # 1
    (2, TType.BOOL, 'bool_two', None, None, ),  # 2
    (3, TType.BOOL, 'bool_three', None, None, ),  # 3
    (4, TType.MAP, 'map_four', (TType.BOOL, None, TType.BOOL, None, False), None, ),  # 4
    (5, TType.LIST, 'list_five', (TType.BOOL, None, False), None, ),  # 5
    (6, TType.BYTE, 'byte_six', None, None, ),  # 6
    None,  # 7
    None,  # 8
    None,  # 9
    None,  # 10
    None,  # 11
    None,  # 12
    None,  # 13
    None,  # 14
    None,  # 15
    None,  # 16
    (17, TType.BOOL, 'bool_seventeen', None, None, ),  # 17
)
fix_spec(all_structs)
del all_structs
