#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class StructValue(object):
    """
    Attributes:
     - username
    """


    def __init__(self, username=None,):
        self.username = username

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.username = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('StructValue')
        if self.username is not None:
            oprot.writeFieldBegin('username', TType.STRING, 1)
            oprot.writeString(self.username.encode('utf-8') if sys.version_info[0] == 2 else self.username)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Union(object):
    """
    Attributes:
     - int_field
     - struct_field
     - string_field
     - list_field
    """


    def __init__(self, int_field=None, struct_field=None, string_field=None, list_field=None,):
        self.int_field = int_field
        self.struct_field = struct_field
        self.string_field = string_field
        self.list_field = list_field

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.int_field = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.struct_field = StructValue()
                    self.struct_field.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.string_field = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.list_field = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI16()
                        self.list_field.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Union')
        if self.int_field is not None:
            oprot.writeFieldBegin('int_field', TType.I64, 1)
            oprot.writeI64(self.int_field)
            oprot.writeFieldEnd()
        if self.struct_field is not None:
            oprot.writeFieldBegin('struct_field', TType.STRUCT, 2)
            self.struct_field.write(oprot)
            oprot.writeFieldEnd()
        if self.string_field is not None:
            oprot.writeFieldBegin('string_field', TType.STRING, 3)
            oprot.writeString(self.string_field.encode('utf-8') if sys.version_info[0] == 2 else self.string_field)
            oprot.writeFieldEnd()
        if self.list_field is not None:
            oprot.writeFieldBegin('list_field', TType.LIST, 4)
            oprot.writeListBegin(TType.I16, len(self.list_field))
            for iter6 in self.list_field:
                oprot.writeI16(iter6)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class UStruct(object):
    """
    Attributes:
     - my_union
     - u_map
     - u_set
     - u_list
    """


    def __init__(self, my_union=None, u_map=None, u_set=None, u_list=None,):
        self.my_union = my_union
        self.u_map = u_map
        self.u_set = u_set
        self.u_list = u_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.my_union = Union()
                    self.my_union.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.u_map = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = Union()
                        _key12.read(iprot)
                        _val13 = Union()
                        _val13.read(iprot)
                        self.u_map[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.SET:
                    self.u_set = set()
                    (_etype17, _size14) = iprot.readSetBegin()
                    for _i18 in range(_size14):
                        _elem19 = Union()
                        _elem19.read(iprot)
                        self.u_set.add(_elem19)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.LIST:
                    self.u_list = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = Union()
                        _elem25.read(iprot)
                        self.u_list.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('UStruct')
        if self.my_union is not None:
            oprot.writeFieldBegin('my_union', TType.STRUCT, 1)
            self.my_union.write(oprot)
            oprot.writeFieldEnd()
        if self.u_map is not None:
            oprot.writeFieldBegin('u_map', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRUCT, TType.STRUCT, len(self.u_map))
            for kiter26, viter27 in self.u_map.items():
                kiter26.write(oprot)
                viter27.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.u_set is not None:
            oprot.writeFieldBegin('u_set', TType.SET, 3)
            oprot.writeSetBegin(TType.STRUCT, len(self.u_set))
            for iter28 in self.u_set:
                iter28.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.u_list is not None:
            oprot.writeFieldBegin('u_list', TType.LIST, 4)
            oprot.writeListBegin(TType.STRUCT, len(self.u_list))
            for iter29 in self.u_list:
                iter29.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(StructValue)
StructValue.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'username', 'UTF8', None, ),  # 1
)
all_structs.append(Union)
Union.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'int_field', None, None, ),  # 1
    (2, TType.STRUCT, 'struct_field', [StructValue, None], None, ),  # 2
    (3, TType.STRING, 'string_field', 'UTF8', None, ),  # 3
    (4, TType.LIST, 'list_field', (TType.I16, None, False), None, ),  # 4
)
all_structs.append(UStruct)
UStruct.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'my_union', [Union, None], None, ),  # 1
    (2, TType.MAP, 'u_map', (TType.STRUCT, [Union, None], TType.STRUCT, [Union, None], False), None, ),  # 2
    (3, TType.SET, 'u_set', (TType.STRUCT, [Union, None], False), None, ),  # 3
    (4, TType.LIST, 'u_list', (TType.STRUCT, [Union, None], False), None, ),  # 4
)
fix_spec(all_structs)
del all_structs
