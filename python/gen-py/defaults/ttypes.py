#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class DefaultStructVal(object):
    """
    Attributes:
     - num
    """


    def __init__(self, num=None,):
        self.num = num

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.num = iprot.readByte()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DefaultStructVal')
        if self.num is not None:
            oprot.writeFieldBegin('num', TType.BYTE, 1)
            oprot.writeByte(self.num)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class Defaults(object):
    """
    Attributes:
     - bool_from_true
     - bool_from_false
     - bool_from_one
     - bool_from_zero
     - byte_val
     - double_from_float
     - double_from_int
     - i16_val
     - i32_val
     - i64_val
     - string_val
     - struct_val
     - map_val
     - set_val
     - list_val
     - empty_struct
     - empty_map
     - empty_set
     - empty_list
    """


    def __init__(self, bool_from_true=True, bool_from_false=False, bool_from_one=True, bool_from_zero=False, byte_val=5, double_from_float=0, double_from_int=0, i16_val=5, i32_val=5, i64_val=5, string_val="abc123", struct_val=DefaultStructVal(**{
        "num": 5,
    }), map_val={
        "a": 1,
        "b": 2,
    }, set_val=set((
        "a",
        "b",
    )), list_val=[
        "a",
        "b",
    ], empty_struct=DefaultStructVal(**{
    }), empty_map={
    }, empty_set=set((
    )), empty_list=[
    ],):
        self.bool_from_true = bool_from_true
        self.bool_from_false = bool_from_false
        self.bool_from_one = bool_from_one
        self.bool_from_zero = bool_from_zero
        self.byte_val = byte_val
        self.double_from_float = double_from_float
        self.double_from_int = double_from_int
        self.i16_val = i16_val
        self.i32_val = i32_val
        self.i64_val = i64_val
        self.string_val = string_val
        if struct_val is self.thrift_spec[12][4]:
            struct_val = DefaultStructVal(**{
                "num": 5,
            })
        self.struct_val = struct_val
        if map_val is self.thrift_spec[13][4]:
            map_val = {
                "a": 1,
                "b": 2,
            }
        self.map_val = map_val
        if set_val is self.thrift_spec[14][4]:
            set_val = set((
                "a",
                "b",
            ))
        self.set_val = set_val
        if list_val is self.thrift_spec[15][4]:
            list_val = [
                "a",
                "b",
            ]
        self.list_val = list_val
        if empty_struct is self.thrift_spec[120][4]:
            empty_struct = DefaultStructVal(**{
            })
        self.empty_struct = empty_struct
        if empty_map is self.thrift_spec[130][4]:
            empty_map = {
            }
        self.empty_map = empty_map
        if empty_set is self.thrift_spec[140][4]:
            empty_set = set((
            ))
        self.empty_set = empty_set
        if empty_list is self.thrift_spec[150][4]:
            empty_list = [
            ]
        self.empty_list = empty_list

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BOOL:
                    self.bool_from_true = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.bool_from_false = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.bool_from_one = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.bool_from_zero = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BYTE:
                    self.byte_val = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.DOUBLE:
                    self.double_from_float = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.double_from_int = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I16:
                    self.i16_val = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.i32_val = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I64:
                    self.i64_val = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.string_val = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRUCT:
                    self.struct_val = DefaultStructVal()
                    self.struct_val.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.MAP:
                    self.map_val = {}
                    (_ktype1, _vtype2, _size0) = iprot.readMapBegin()
                    for _i4 in range(_size0):
                        _key5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val6 = iprot.readByte()
                        self.map_val[_key5] = _val6
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.SET:
                    self.set_val = set()
                    (_etype10, _size7) = iprot.readSetBegin()
                    for _i11 in range(_size7):
                        _elem12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.set_val.add(_elem12)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.LIST:
                    self.list_val = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.list_val.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 120:
                if ftype == TType.STRUCT:
                    self.empty_struct = DefaultStructVal()
                    self.empty_struct.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 130:
                if ftype == TType.MAP:
                    self.empty_map = {}
                    (_ktype20, _vtype21, _size19) = iprot.readMapBegin()
                    for _i23 in range(_size19):
                        _key24 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val25 = iprot.readByte()
                        self.empty_map[_key24] = _val25
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 140:
                if ftype == TType.SET:
                    self.empty_set = set()
                    (_etype29, _size26) = iprot.readSetBegin()
                    for _i30 in range(_size26):
                        _elem31 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.empty_set.add(_elem31)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 150:
                if ftype == TType.LIST:
                    self.empty_list = []
                    (_etype35, _size32) = iprot.readListBegin()
                    for _i36 in range(_size32):
                        _elem37 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.empty_list.append(_elem37)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Defaults')
        if self.bool_from_true is not None:
            oprot.writeFieldBegin('bool_from_true', TType.BOOL, 1)
            oprot.writeBool(self.bool_from_true)
            oprot.writeFieldEnd()
        if self.bool_from_false is not None:
            oprot.writeFieldBegin('bool_from_false', TType.BOOL, 2)
            oprot.writeBool(self.bool_from_false)
            oprot.writeFieldEnd()
        if self.bool_from_one is not None:
            oprot.writeFieldBegin('bool_from_one', TType.BOOL, 3)
            oprot.writeBool(self.bool_from_one)
            oprot.writeFieldEnd()
        if self.bool_from_zero is not None:
            oprot.writeFieldBegin('bool_from_zero', TType.BOOL, 4)
            oprot.writeBool(self.bool_from_zero)
            oprot.writeFieldEnd()
        if self.byte_val is not None:
            oprot.writeFieldBegin('byte_val', TType.BYTE, 5)
            oprot.writeByte(self.byte_val)
            oprot.writeFieldEnd()
        if self.double_from_float is not None:
            oprot.writeFieldBegin('double_from_float', TType.DOUBLE, 6)
            oprot.writeDouble(self.double_from_float)
            oprot.writeFieldEnd()
        if self.double_from_int is not None:
            oprot.writeFieldBegin('double_from_int', TType.DOUBLE, 7)
            oprot.writeDouble(self.double_from_int)
            oprot.writeFieldEnd()
        if self.i16_val is not None:
            oprot.writeFieldBegin('i16_val', TType.I16, 8)
            oprot.writeI16(self.i16_val)
            oprot.writeFieldEnd()
        if self.i32_val is not None:
            oprot.writeFieldBegin('i32_val', TType.I32, 9)
            oprot.writeI32(self.i32_val)
            oprot.writeFieldEnd()
        if self.i64_val is not None:
            oprot.writeFieldBegin('i64_val', TType.I64, 10)
            oprot.writeI64(self.i64_val)
            oprot.writeFieldEnd()
        if self.string_val is not None:
            oprot.writeFieldBegin('string_val', TType.STRING, 11)
            oprot.writeString(self.string_val.encode('utf-8') if sys.version_info[0] == 2 else self.string_val)
            oprot.writeFieldEnd()
        if self.struct_val is not None:
            oprot.writeFieldBegin('struct_val', TType.STRUCT, 12)
            self.struct_val.write(oprot)
            oprot.writeFieldEnd()
        if self.map_val is not None:
            oprot.writeFieldBegin('map_val', TType.MAP, 13)
            oprot.writeMapBegin(TType.STRING, TType.BYTE, len(self.map_val))
            for kiter38, viter39 in self.map_val.items():
                oprot.writeString(kiter38.encode('utf-8') if sys.version_info[0] == 2 else kiter38)
                oprot.writeByte(viter39)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.set_val is not None:
            oprot.writeFieldBegin('set_val', TType.SET, 14)
            oprot.writeSetBegin(TType.STRING, len(self.set_val))
            for iter40 in self.set_val:
                oprot.writeString(iter40.encode('utf-8') if sys.version_info[0] == 2 else iter40)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.list_val is not None:
            oprot.writeFieldBegin('list_val', TType.LIST, 15)
            oprot.writeListBegin(TType.STRING, len(self.list_val))
            for iter41 in self.list_val:
                oprot.writeString(iter41.encode('utf-8') if sys.version_info[0] == 2 else iter41)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.empty_struct is not None:
            oprot.writeFieldBegin('empty_struct', TType.STRUCT, 120)
            self.empty_struct.write(oprot)
            oprot.writeFieldEnd()
        if self.empty_map is not None:
            oprot.writeFieldBegin('empty_map', TType.MAP, 130)
            oprot.writeMapBegin(TType.STRING, TType.BYTE, len(self.empty_map))
            for kiter42, viter43 in self.empty_map.items():
                oprot.writeString(kiter42.encode('utf-8') if sys.version_info[0] == 2 else kiter42)
                oprot.writeByte(viter43)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.empty_set is not None:
            oprot.writeFieldBegin('empty_set', TType.SET, 140)
            oprot.writeSetBegin(TType.STRING, len(self.empty_set))
            for iter44 in self.empty_set:
                oprot.writeString(iter44.encode('utf-8') if sys.version_info[0] == 2 else iter44)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.empty_list is not None:
            oprot.writeFieldBegin('empty_list', TType.LIST, 150)
            oprot.writeListBegin(TType.STRING, len(self.empty_list))
            for iter45 in self.empty_list:
                oprot.writeString(iter45.encode('utf-8') if sys.version_info[0] == 2 else iter45)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(DefaultStructVal)
DefaultStructVal.thrift_spec = (
    None,  # 0
    (1, TType.BYTE, 'num', None, None, ),  # 1
)
all_structs.append(Defaults)
Defaults.thrift_spec = (
    None,  # 0
    (1, TType.BOOL, 'bool_from_true', None, True, ),  # 1
    (2, TType.BOOL, 'bool_from_false', None, False, ),  # 2
    (3, TType.BOOL, 'bool_from_one', None, True, ),  # 3
    (4, TType.BOOL, 'bool_from_zero', None, False, ),  # 4
    (5, TType.BYTE, 'byte_val', None, 5, ),  # 5
    (6, TType.DOUBLE, 'double_from_float', None, 0, ),  # 6
    (7, TType.DOUBLE, 'double_from_int', None, 0, ),  # 7
    (8, TType.I16, 'i16_val', None, 5, ),  # 8
    (9, TType.I32, 'i32_val', None, 5, ),  # 9
    (10, TType.I64, 'i64_val', None, 5, ),  # 10
    (11, TType.STRING, 'string_val', 'UTF8', "abc123", ),  # 11
    (12, TType.STRUCT, 'struct_val', [DefaultStructVal, None], DefaultStructVal(**{
        "num": 5,
    }), ),  # 12
    (13, TType.MAP, 'map_val', (TType.STRING, 'UTF8', TType.BYTE, None, False), {
        "a": 1,
        "b": 2,
    }, ),  # 13
    (14, TType.SET, 'set_val', (TType.STRING, 'UTF8', False), set((
        "a",
        "b",
    )), ),  # 14
    (15, TType.LIST, 'list_val', (TType.STRING, 'UTF8', False), [
        "a",
        "b",
    ], ),  # 15
    None,  # 16
    None,  # 17
    None,  # 18
    None,  # 19
    None,  # 20
    None,  # 21
    None,  # 22
    None,  # 23
    None,  # 24
    None,  # 25
    None,  # 26
    None,  # 27
    None,  # 28
    None,  # 29
    None,  # 30
    None,  # 31
    None,  # 32
    None,  # 33
    None,  # 34
    None,  # 35
    None,  # 36
    None,  # 37
    None,  # 38
    None,  # 39
    None,  # 40
    None,  # 41
    None,  # 42
    None,  # 43
    None,  # 44
    None,  # 45
    None,  # 46
    None,  # 47
    None,  # 48
    None,  # 49
    None,  # 50
    None,  # 51
    None,  # 52
    None,  # 53
    None,  # 54
    None,  # 55
    None,  # 56
    None,  # 57
    None,  # 58
    None,  # 59
    None,  # 60
    None,  # 61
    None,  # 62
    None,  # 63
    None,  # 64
    None,  # 65
    None,  # 66
    None,  # 67
    None,  # 68
    None,  # 69
    None,  # 70
    None,  # 71
    None,  # 72
    None,  # 73
    None,  # 74
    None,  # 75
    None,  # 76
    None,  # 77
    None,  # 78
    None,  # 79
    None,  # 80
    None,  # 81
    None,  # 82
    None,  # 83
    None,  # 84
    None,  # 85
    None,  # 86
    None,  # 87
    None,  # 88
    None,  # 89
    None,  # 90
    None,  # 91
    None,  # 92
    None,  # 93
    None,  # 94
    None,  # 95
    None,  # 96
    None,  # 97
    None,  # 98
    None,  # 99
    None,  # 100
    None,  # 101
    None,  # 102
    None,  # 103
    None,  # 104
    None,  # 105
    None,  # 106
    None,  # 107
    None,  # 108
    None,  # 109
    None,  # 110
    None,  # 111
    None,  # 112
    None,  # 113
    None,  # 114
    None,  # 115
    None,  # 116
    None,  # 117
    None,  # 118
    None,  # 119
    (120, TType.STRUCT, 'empty_struct', [DefaultStructVal, None], DefaultStructVal(**{
    }), ),  # 120
    None,  # 121
    None,  # 122
    None,  # 123
    None,  # 124
    None,  # 125
    None,  # 126
    None,  # 127
    None,  # 128
    None,  # 129
    (130, TType.MAP, 'empty_map', (TType.STRING, 'UTF8', TType.BYTE, None, False), {
    }, ),  # 130
    None,  # 131
    None,  # 132
    None,  # 133
    None,  # 134
    None,  # 135
    None,  # 136
    None,  # 137
    None,  # 138
    None,  # 139
    (140, TType.SET, 'empty_set', (TType.STRING, 'UTF8', False), set((
    )), ),  # 140
    None,  # 141
    None,  # 142
    None,  # 143
    None,  # 144
    None,  # 145
    None,  # 146
    None,  # 147
    None,  # 148
    None,  # 149
    (150, TType.LIST, 'empty_list', (TType.STRING, 'UTF8', False), [
    ], ),  # 150
)
fix_spec(all_structs)
del all_structs
