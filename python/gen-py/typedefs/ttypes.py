#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class Typedefs(object):
    """
    Attributes:
     - ints
     - mappings
     - numbers
    """


    def __init__(self, ints=None, mappings=None, numbers=None,):
        self.ints = ints
        self.mappings = mappings
        self.numbers = numbers

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.SET:
                    self.ints = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readI32()
                        self.ints.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.mappings = {}
                    (_ktype7, _vtype8, _size6) = iprot.readMapBegin()
                    for _i10 in range(_size6):
                        _key11 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.mappings[_key11] = _val12
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.numbers = []
                    (_etype16, _size13) = iprot.readListBegin()
                    for _i17 in range(_size13):
                        _elem18 = iprot.readI64()
                        self.numbers.append(_elem18)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('Typedefs')
        if self.ints is not None:
            oprot.writeFieldBegin('ints', TType.SET, 1)
            oprot.writeSetBegin(TType.I32, len(self.ints))
            for iter19 in self.ints:
                oprot.writeI32(iter19)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.mappings is not None:
            oprot.writeFieldBegin('mappings', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.mappings))
            for kiter20, viter21 in self.mappings.items():
                oprot.writeString(kiter20.encode('utf-8') if sys.version_info[0] == 2 else kiter20)
                oprot.writeString(viter21.encode('utf-8') if sys.version_info[0] == 2 else viter21)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.numbers is not None:
            oprot.writeFieldBegin('numbers', TType.LIST, 3)
            oprot.writeListBegin(TType.I64, len(self.numbers))
            for iter22 in self.numbers:
                oprot.writeI64(iter22)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(Typedefs)
Typedefs.thrift_spec = (
    None,  # 0
    (1, TType.SET, 'ints', (TType.I32, None, False), None, ),  # 1
    (2, TType.MAP, 'mappings', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 2
    (3, TType.LIST, 'numbers', (TType.I64, None, False), None, ),  # 3
)
fix_spec(all_structs)
del all_structs
