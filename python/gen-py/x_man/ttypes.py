#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class PowerLevel(object):
    ALPHA = 0
    BETA = 1
    OMEGA = 2

    _VALUES_TO_NAMES = {
        0: "ALPHA",
        1: "BETA",
        2: "OMEGA",
    }

    _NAMES_TO_VALUES = {
        "ALPHA": 0,
        "BETA": 1,
        "OMEGA": 2,
    }


class XMan(object):
    """
    Attributes:
     - handle
     - name
     - universe
     - power_level
    """


    def __init__(self, handle=None, name=None, universe="Earth-616", power_level=None,):
        self.handle = handle
        self.name = name
        self.universe = universe
        self.power_level = power_level

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.handle = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.universe = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.power_level = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('XMan')
        if self.handle is not None:
            oprot.writeFieldBegin('handle', TType.STRING, 1)
            oprot.writeString(self.handle.encode('utf-8') if sys.version_info[0] == 2 else self.handle)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.universe is not None:
            oprot.writeFieldBegin('universe', TType.STRING, 3)
            oprot.writeString(self.universe.encode('utf-8') if sys.version_info[0] == 2 else self.universe)
            oprot.writeFieldEnd()
        if self.power_level is not None:
            oprot.writeFieldBegin('power_level', TType.I32, 4)
            oprot.writeI32(self.power_level)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(XMan)
XMan.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'handle', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'universe', 'UTF8', "Earth-616", ),  # 3
    (4, TType.I32, 'power_level', None, None, ),  # 4
)
fix_spec(all_structs)
del all_structs
